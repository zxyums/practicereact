{
  field: 'updatedDate',
  headerName: 'Last Update Date (UTC)',
  minWidth: 240,
  width: 240,
  sortable: true,

  // Ensure the date is stored and used as a Date object
  valueGetter: (params) => {
    return params.data?.updatedDate ? new Date(params.data.updatedDate) : null;
  },

  // Display in UTC format (DD-MMM-YYYY HH:mm UTC)
  valueFormatter: (params) => {
    if (!params.value) return ''; // Handle null values gracefully
    const utcDate = new Date(params.value);

    return utcDate.toLocaleString('en-GB', {
      day: '2-digit',
      month: 'short',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      hour12: false, // 24-hour format
    }) + ' UTC';
  },

  // Custom sorting: Null values should go last
  comparator: (date1, date2) => {
    if (!date1 && !date2) return 0; // Both are null
    if (!date1) return 1; // Null should go last
    if (!date2) return -1; // Null should go last

    return new Date(date1).getTime() - new Date(date2).getTime(); // Sort in ascending order
  },

  // React-compatible cellRenderer for tooltip with local time
  cellRenderer: (params) => {
    if (!params.value) return ''; // Don't render anything for null values

    const utcDate = new Date(params.value);
    const localDate = utcDate.toLocaleString(undefined, {
      day: '2-digit',
      month: 'short',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      hour12: false, // 24-hour format
      timeZoneName: 'short',
    });

    // Use `params.colDef.valueFormatter` to get formatted UTC date
    const utcFormatted = params.colDef.valueFormatter(params);

    // Return JSX instead of a raw DOM element
    return (
      <div title={`Local Time: ${localDate}`}>
        {utcFormatted}
      </div>
    );
  }
}